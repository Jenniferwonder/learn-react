{"ast":null,"code":"var _jsxFileName = \"E:\\\\SynologyDrive\\\\TechProjects\\\\React-Projects\\\\react-tutorial\\\\src\\\\08-preserve-reset-state\\\\score-board\\\\ScoreboardB.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Option 2: Resetting state with a key\n// A more generic way to reset a component’s state.\n// You can use key to make React distinguish between any components.\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ScoreboardB() {\n  _s();\n  const [isPlayerA, setIsPlayerA] = useState(true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isPlayerA ? /*#__PURE__*/_jsxDEV(Counter, {\n      person: \"Taylor\"\n    }, \"Taylor\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(Counter, {\n      person: \"Sarah\"\n    }, \"Sarah\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setIsPlayerA(!isPlayerA);\n      },\n      children: \"Next player!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n}\n_s(ScoreboardB, \"TlqYqLPXhz6h+ibsnn1OW6c8A9Q=\");\n_c = ScoreboardB;\nfunction Counter(_ref) {\n  _s2();\n  let {\n    person\n  } = _ref;\n  const [score, setScore] = useState(0);\n  const [hover, setHover] = useState(false);\n  let className = \"counter\";\n  if (hover) {\n    className += \" hover\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    onPointerEnter: () => setHover(true),\n    onPointerLeave: () => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [person, \"'s score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setScore(score + 1),\n      children: \"Add one\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n}\n_s2(Counter, \"1kLz2REePIbx0fgJrSu63gSUSZ8=\");\n_c2 = Counter;\nvar _c, _c2;\n$RefreshReg$(_c, \"ScoreboardB\");\n$RefreshReg$(_c2, \"Counter\");","map":{"version":3,"names":["useState","ScoreboardB","isPlayerA","setIsPlayerA","Counter","person","score","setScore","hover","setHover","className"],"sources":["E:/SynologyDrive/TechProjects/React-Projects/react-tutorial/src/08-preserve-reset-state/score-board/ScoreboardB.jsx"],"sourcesContent":["// Option 2: Resetting state with a key\n// A more generic way to reset a component’s state.\n// You can use key to make React distinguish between any components.\nimport { useState } from \"react\";\n\nexport default function ScoreboardB() {\n\tconst [isPlayerA, setIsPlayerA] = useState(true);\n\treturn (\n\t\t<div>\n\t\t\t{isPlayerA ? (\n\t\t\t\t<Counter key=\"Taylor\" person=\"Taylor\" />\n\t\t\t) : (\n\t\t\t\t<Counter key=\"Sarah\" person=\"Sarah\" />\n\t\t\t)}\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetIsPlayerA(!isPlayerA);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tNext player!\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nfunction Counter({ person }) {\n\tconst [score, setScore] = useState(0);\n\tconst [hover, setHover] = useState(false);\n\n\tlet className = \"counter\";\n\tif (hover) {\n\t\tclassName += \" hover\";\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tclassName={className}\n\t\t\tonPointerEnter={() => setHover(true)}\n\t\t\tonPointerLeave={() => setHover(false)}\n\t\t>\n\t\t\t<h1>\n\t\t\t\t{person}'s score: {score}\n\t\t\t</h1>\n\t\t\t<button onClick={() => setScore(score + 1)}>Add one</button>\n\t\t</div>\n\t);\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAEjC,eAAe,SAASC,WAAW,GAAG;EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,QAAQ,CAAC,IAAI,CAAC;EAChD,oBACC;IAAA,WACEE,SAAS,gBACT,QAAC,OAAO;MAAc,MAAM,EAAC;IAAQ,GAAxB,QAAQ;MAAA;MAAA;MAAA;IAAA,QAAmB,gBAExC,QAAC,OAAO;MAAa,MAAM,EAAC;IAAO,GAAtB,OAAO;MAAA;MAAA;MAAA;IAAA,QACpB,eACD;MACC,OAAO,EAAE,MAAM;QACdC,YAAY,CAAC,CAACD,SAAS,CAAC;MACzB,CAAE;MAAA,UACF;IAED;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAER;AAAC,GAlBuBD,WAAW;AAAA,KAAXA,WAAW;AAoBnC,SAASG,OAAO,OAAa;EAAA;EAAA,IAAZ;IAAEC;EAAO,CAAC;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEzC,IAAIU,SAAS,GAAG,SAAS;EACzB,IAAIF,KAAK,EAAE;IACVE,SAAS,IAAI,QAAQ;EACtB;EAEA,oBACC;IACC,SAAS,EAAEA,SAAU;IACrB,cAAc,EAAE,MAAMD,QAAQ,CAAC,IAAI,CAAE;IACrC,cAAc,EAAE,MAAMA,QAAQ,CAAC,KAAK,CAAE;IAAA,wBAEtC;MAAA,WACEJ,MAAM,EAAC,YAAU,EAACC,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QACpB,eACL;MAAQ,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAE;MAAA,UAAC;IAAO;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACvD;AAER;AAAC,IArBQF,OAAO;AAAA,MAAPA,OAAO;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}