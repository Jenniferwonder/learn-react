{"ast":null,"code":"import n, { freeze as r } from \"immer\";\nimport { useState as t, useCallback as o, useMemo as f, useReducer as u } from \"react\";\nfunction i(f) {\n  var u = t(function () {\n      return r(\"function\" == typeof f ? f() : f, !0);\n    }),\n    i = u[1];\n  return [u[0], o(function (t) {\n    i(\"function\" == typeof t ? n(t) : r(t));\n  }, [])];\n}\nfunction e(r, t, o) {\n  var i = f(function () {\n    return n(r);\n  }, [r]);\n  return u(i, t, o);\n}\nexport { i as useImmer, e as useImmerReducer };","map":{"version":3,"mappings":";;SASgBA,EAASC;EAAAA,QACIC,EAAS;MAAA,OAClCC,EAC0B,qBAAjBF,IAA8BA,MAAiBA,IACtD;IAAA;IAHQG;EAMZ,OAAO,OAELC,EAAY,UAACC;IACwBF,EAAZ,qBAAZE,IAAoCC,EAAQD,KACtCH,EAAOG;EAAAA,GACvB;AAAA;AAAA,SAkCSE,EACdC,GACAC,GACAC;EAEA,IAAMC,IAAgBC,EAAQ;IAAA,OAAMN,EAAQE;EAAAA,GAAU,CAACA;EACvD,OAAOK,EAAWF,GAAeF,GAAuBC;AAAAA;AAAAA","names":["useImmer","initialValue","useState","freeze","updateValue","useCallback","updater","produce","useImmerReducer","reducer","initializerArg","initializer","cachedReducer","useMemo","useReducer"],"sources":["E:\\SynologyDrive\\TechProjects\\React-Projects\\react-tutorial\\node_modules\\use-immer\\src\\index.ts"],"sourcesContent":["import produce, { Draft, nothing, freeze } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type DraftFunction<S> = (draft: Draft<S>) => void;\nexport type Updater<S> = (arg: S | DraftFunction<S>) => void;\nexport type ImmerHook<S> = [S, Updater<S>];\n\nexport function useImmer<S = any>(initialValue: S | (() => S)): ImmerHook<S>;\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(() =>\n    freeze(\n      typeof initialValue === \"function\" ? initialValue() : initialValue,\n      true\n    )\n  );\n  return [\n    val,\n    useCallback((updater) => {\n      if (typeof updater === \"function\") updateValue(produce(updater));\n      else updateValue(freeze(updater));\n    }, []),\n  ];\n}\n\n// Provides different overloads of `useImmerReducer` similar to `useReducer` from `@types/react`.\n\nexport type ImmerReducer<S, A> = (\n  draftState: Draft<S>,\n  action: A\n) => void | (S extends undefined ? typeof nothing : S);\n\n/**\n * @deprecated Use `ImmerReducer` instead since there is already a `Reducer` type in `@types/react`.\n */\nexport type Reducer<S = any, A = any> = ImmerReducer<S, A>;\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: S & I,\n  initializer: (arg: S & I) => S\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: I,\n  initializer: (arg: I) => S\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A>(\n  reducer: ImmerReducer<S, A>,\n  initialState: S,\n  initializer?: undefined\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: S & I,\n  initializer?: (arg: S & I) => S\n) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initializerArg as any, initializer as any);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}