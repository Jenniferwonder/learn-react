{"ast":null,"code":"var _jsxFileName = \"E:\\\\SynologyDrive\\\\TechProjects\\\\React-Projects\\\\react-tutorial\\\\src\\\\05-react-to-input\\\\letter-select\\\\MailSelect.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { letters } from \"./data.js\";\nimport Letter from \"./Letter.js\";\nimport \"./styles.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MailSelect() {\n  _s();\n  // const [selectedId, setSelectedId] = useState(null);\n  const [selectedIds, setSelectedIds] = useState([]);\n\n  //First Version ---------------------------------\n  // const [newLetters, setNewLetters] = useState(\n  // \tletters.map((letter) => {\n  // \t\treturn {\n  // \t\t\t...letter,\n  // \t\t\tisSelected: false,\n  // \t\t};\n  // \t})\n  // );\n  // const selectedLetters = newLetters.filter((letter) => letter.isSelected);\n\n  // TODO: allow multiple selection\n  // const selectedCount = 1;\n  const selectedCount = selectedIds.length;\n\n  //First Version ---------------------------------\n  // const selectedCount = selectedLetters.length;\n\n  function handleToggle(toggledId) {\n    // TODO: allow multiple selection\n    // setSelectedId(toggledId);\n    if (selectedIds.includes(toggledId)) {\n      setSelectedIds(selectedIds.filter(id => id !== toggledId));\n    } else {\n      setSelectedIds([...selectedIds, toggledId]);\n    }\n\n    //First Version ---------------------------------\n    // setNewLetters(\n    // \tnewLetters.map((letter) => {\n    // \t\tif (letter.id === toggledId) {\n    // \t\t\treturn {\n    // \t\t\t\t...letter,\n    // \t\t\t\tisSelected: !letter.isSelected,\n    // \t\t\t};\n    // \t\t} else {\n    // \t\t\treturn letter;\n    // \t\t}\n    // \t})\n    // );\n\n    //Failed Version ----------------------\n    // let selectedLetter = letters.find((letter) => letter.id === toggledId);\n    // if (selectedLetters.includes(selectedLetter)) {\n    // \tselectedLetter.isSelected = false;\n    // \tsetSelectedLetters(\n    // \t\tselectedLetters.filter((letter) => (letter.isSelected = true))\n    // \t);\n    // } else {\n    // \tsetSelectedLetters([...selectedLetters, selectedLetter]);\n    // \tselectedLetter.isSelected = true;\n    // }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Inbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [letters.map(letter => /*#__PURE__*/_jsxDEV(Letter, {\n        letter: letter,\n        isSelected:\n        // TODO: allow multiple selection\n        // letter.id === selectedId\n        selectedIds.includes(letter.id)\n\n        //First Version ---------------------------------\n        //letter.isSelected\n        ,\n\n        onToggle: handleToggle\n      }, letter.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }, this)), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: [\"You selected \", selectedCount, \" letters\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n_s(MailSelect, \"ndxFfIZ7sJtBEOivcsSBDBZx8+M=\");\n_c = MailSelect;\nvar _c;\n$RefreshReg$(_c, \"MailSelect\");","map":{"version":3,"names":["useState","letters","Letter","MailSelect","selectedIds","setSelectedIds","selectedCount","length","handleToggle","toggledId","includes","filter","id","map","letter"],"sources":["E:/SynologyDrive/TechProjects/React-Projects/react-tutorial/src/05-react-to-input/letter-select/MailSelect.js"],"sourcesContent":["import { useState } from \"react\";\nimport { letters } from \"./data.js\";\nimport Letter from \"./Letter.js\";\nimport \"./styles.css\";\n\nexport default function MailSelect() {\n\t// const [selectedId, setSelectedId] = useState(null);\n\tconst [selectedIds, setSelectedIds] = useState([]);\n\n\t//First Version ---------------------------------\n\t// const [newLetters, setNewLetters] = useState(\n\t// \tletters.map((letter) => {\n\t// \t\treturn {\n\t// \t\t\t...letter,\n\t// \t\t\tisSelected: false,\n\t// \t\t};\n\t// \t})\n\t// );\n\t// const selectedLetters = newLetters.filter((letter) => letter.isSelected);\n\n\t// TODO: allow multiple selection\n\t// const selectedCount = 1;\n\tconst selectedCount = selectedIds.length;\n\n\t//First Version ---------------------------------\n\t// const selectedCount = selectedLetters.length;\n\n\tfunction handleToggle(toggledId) {\n\t\t// TODO: allow multiple selection\n\t\t// setSelectedId(toggledId);\n\t\tif (selectedIds.includes(toggledId)) {\n\t\t\tsetSelectedIds(selectedIds.filter((id) => id !== toggledId));\n\t\t} else {\n\t\t\tsetSelectedIds([...selectedIds, toggledId]);\n\t\t}\n\n\t\t//First Version ---------------------------------\n\t\t// setNewLetters(\n\t\t// \tnewLetters.map((letter) => {\n\t\t// \t\tif (letter.id === toggledId) {\n\t\t// \t\t\treturn {\n\t\t// \t\t\t\t...letter,\n\t\t// \t\t\t\tisSelected: !letter.isSelected,\n\t\t// \t\t\t};\n\t\t// \t\t} else {\n\t\t// \t\t\treturn letter;\n\t\t// \t\t}\n\t\t// \t})\n\t\t// );\n\n\t\t//Failed Version ----------------------\n\t\t// let selectedLetter = letters.find((letter) => letter.id === toggledId);\n\t\t// if (selectedLetters.includes(selectedLetter)) {\n\t\t// \tselectedLetter.isSelected = false;\n\t\t// \tsetSelectedLetters(\n\t\t// \t\tselectedLetters.filter((letter) => (letter.isSelected = true))\n\t\t// \t);\n\t\t// } else {\n\t\t// \tsetSelectedLetters([...selectedLetters, selectedLetter]);\n\t\t// \tselectedLetter.isSelected = true;\n\t\t// }\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<h2>Inbox</h2>\n\t\t\t<ul>\n\t\t\t\t{letters.map((letter) => (\n\t\t\t\t\t<Letter\n\t\t\t\t\t\tkey={letter.id}\n\t\t\t\t\t\tletter={letter}\n\t\t\t\t\t\tisSelected={\n\t\t\t\t\t\t\t// TODO: allow multiple selection\n\t\t\t\t\t\t\t// letter.id === selectedId\n\t\t\t\t\t\t\tselectedIds.includes(letter.id)\n\n\t\t\t\t\t\t\t//First Version ---------------------------------\n\t\t\t\t\t\t\t//letter.isSelected\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonToggle={handleToggle}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<hr />\n\t\t\t\t<p>\n\t\t\t\t\t<b>You selected {selectedCount} letters</b>\n\t\t\t\t</p>\n\t\t\t</ul>\n\t\t</>\n\t);\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,MAAM,MAAM,aAAa;AAChC,OAAO,cAAc;AAAC;AAAA;AAEtB,eAAe,SAASC,UAAU,GAAG;EAAA;EACpC;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA,MAAMM,aAAa,GAAGF,WAAW,CAACG,MAAM;;EAExC;EACA;;EAEA,SAASC,YAAY,CAACC,SAAS,EAAE;IAChC;IACA;IACA,IAAIL,WAAW,CAACM,QAAQ,CAACD,SAAS,CAAC,EAAE;MACpCJ,cAAc,CAACD,WAAW,CAACO,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKH,SAAS,CAAC,CAAC;IAC7D,CAAC,MAAM;MACNJ,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEK,SAAS,CAAC,CAAC;IAC5C;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;;EAEA,oBACC;IAAA,wBACC;MAAA,UAAI;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,eACd;MAAA,WACER,OAAO,CAACY,GAAG,CAAEC,MAAM,iBACnB,QAAC,MAAM;QAEN,MAAM,EAAEA,MAAO;QACf,UAAU;QACT;QACA;QACAV,WAAW,CAACM,QAAQ,CAACI,MAAM,CAACF,EAAE;;QAE9B;QACA;QACA;;QACD,QAAQ,EAAEJ;MAAa,GAVlBM,MAAM,CAACF,EAAE;QAAA;QAAA;QAAA;MAAA,QAYf,CAAC,eACF;QAAA;QAAA;QAAA;MAAA,QAAM,eACN;QAAA,uBACC;UAAA,WAAG,eAAa,EAACN,aAAa,EAAC,UAAQ;QAAA;UAAA;UAAA;UAAA;QAAA;MAAI;QAAA;QAAA;QAAA;MAAA,QACxC;IAAA;MAAA;MAAA;MAAA;IAAA,QACA;EAAA,gBACH;AAEL;AAAC,GApFuBH,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}