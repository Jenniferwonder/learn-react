{"ast":null,"code":"var _jsxFileName = \"E:\\\\SynologyDrive\\\\TechProjects\\\\React-Projects\\\\react-tutorial\\\\src\\\\Game.js\",\n  _s = $RefreshSig$();\n// 02-tic-tac-toe\nimport { useState } from \"react\";\nimport { React } from \"react\";\nimport Board from \"./components/02-tic-tac-toe/Board\";\n\n// Lift state up again to add time travel\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  // To keep track of which step the user is currently viewing\n  const [currentMove, setCurrentMove] = useState(0);\n\n  // Remove redundant state\n  // const [xIsNext, setXIsNext] = useState(true);\n  const xIsNext = currentMove % 2 === 0;\n\n  // Read the last squares array from the history\n  // const currentSquares = history[history.length - 1];\n  // to render the currently selected move, instead of always rendering the final move\n  const currentSquares = history[currentMove];\n\n  // Function to update the game\n  function handlePlay(nextSquares) {\n    // setHistory([...history, nextSquares]);\n    // If you “go back in time” and then make a new move from that point, you only want to keep the history up to that point.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    // setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    // set xIsNext to true if the number that you’re changing currentMove to is even (偶数)\n    setCurrentMove(nextMove);\n    // setXIsNext(nextMove % 2 === 0);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = \"Go to move #\" + move;\n    } else {\n      description = \"Go to game start\";\n    }\n    return (\n      /*#__PURE__*/\n      // it’s safe to use the move index as a key\n      _jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(move),\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 5\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 4\n      }, this)\n    );\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n}\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c = Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["useState","React","Board","Game","history","setHistory","Array","fill","currentMove","setCurrentMove","xIsNext","currentSquares","handlePlay","nextSquares","nextHistory","slice","length","jumpTo","nextMove","moves","map","squares","move","description"],"sources":["E:/SynologyDrive/TechProjects/React-Projects/react-tutorial/src/Game.js"],"sourcesContent":["// 02-tic-tac-toe\nimport { useState } from \"react\";\nimport { React } from \"react\";\nimport Board from \"./components/02-tic-tac-toe/Board\";\n\n// Lift state up again to add time travel\nexport default function Game() {\n\tconst [history, setHistory] = useState([Array(9).fill(null)]);\n\t// To keep track of which step the user is currently viewing\n\tconst [currentMove, setCurrentMove] = useState(0);\n\n\t// Remove redundant state\n\t// const [xIsNext, setXIsNext] = useState(true);\n\tconst xIsNext = currentMove % 2 === 0;\n\n\t// Read the last squares array from the history\n\t// const currentSquares = history[history.length - 1];\n\t// to render the currently selected move, instead of always rendering the final move\n\tconst currentSquares = history[currentMove];\n\n\t// Function to update the game\n\tfunction handlePlay(nextSquares) {\n\t\t// setHistory([...history, nextSquares]);\n\t\t// If you “go back in time” and then make a new move from that point, you only want to keep the history up to that point.\n\t\tconst nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\t\tsetHistory(nextHistory);\n\t\tsetCurrentMove(nextHistory.length - 1);\n\t\t// setXIsNext(!xIsNext);\n\t}\n\n\tfunction jumpTo(nextMove) {\n\t\t// set xIsNext to true if the number that you’re changing currentMove to is even (偶数)\n\t\tsetCurrentMove(nextMove);\n\t\t// setXIsNext(nextMove % 2 === 0);\n\t}\n\n\tconst moves = history.map((squares, move) => {\n\t\tlet description;\n\t\tif (move > 0) {\n\t\t\tdescription = \"Go to move #\" + move;\n\t\t} else {\n\t\t\tdescription = \"Go to game start\";\n\t\t}\n\t\treturn (\n\t\t\t// it’s safe to use the move index as a key\n\t\t\t<li key={move}>\n\t\t\t\t<button onClick={() => jumpTo(move)}>{description}</button>\n\t\t\t</li>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n\t\t\t</div>\n\t\t\t<div className=\"game-info\">\n\t\t\t\t<ol>{moves}</ol>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,KAAK,QAAQ,OAAO;AAC7B,OAAOC,KAAK,MAAM,mCAAmC;;AAErD;AAAA;AACA,eAAe,SAASC,IAAI,GAAG;EAAA;EAC9B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,CAACM,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7D;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;;EAEjD;EACA;EACA,MAAMU,OAAO,GAAGF,WAAW,GAAG,CAAC,KAAK,CAAC;;EAErC;EACA;EACA;EACA,MAAMG,cAAc,GAAGP,OAAO,CAACI,WAAW,CAAC;;EAE3C;EACA,SAASI,UAAU,CAACC,WAAW,EAAE;IAChC;IACA;IACA,MAAMC,WAAW,GAAG,CAAC,GAAGV,OAAO,CAACW,KAAK,CAAC,CAAC,EAAEP,WAAW,GAAG,CAAC,CAAC,EAAEK,WAAW,CAAC;IACvER,UAAU,CAACS,WAAW,CAAC;IACvBL,cAAc,CAACK,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC;IACtC;EACD;;EAEA,SAASC,MAAM,CAACC,QAAQ,EAAE;IACzB;IACAT,cAAc,CAACS,QAAQ,CAAC;IACxB;EACD;;EAEA,MAAMC,KAAK,GAAGf,OAAO,CAACgB,GAAG,CAAC,CAACC,OAAO,EAAEC,IAAI,KAAK;IAC5C,IAAIC,WAAW;IACf,IAAID,IAAI,GAAG,CAAC,EAAE;MACbC,WAAW,GAAG,cAAc,GAAGD,IAAI;IACpC,CAAC,MAAM;MACNC,WAAW,GAAG,kBAAkB;IACjC;IACA;MAAA;MACC;MACA;QAAA,uBACC;UAAQ,OAAO,EAAE,MAAMN,MAAM,CAACK,IAAI,CAAE;UAAA,UAAEC;QAAW;UAAA;UAAA;UAAA;QAAA;MAAU,GADnDD,IAAI;QAAA;QAAA;QAAA;MAAA;IAER;EAEP,CAAC,CAAC;EAEF,oBACC;IAAK,SAAS,EAAC,MAAM;IAAA,wBACpB;MAAK,SAAS,EAAC,YAAY;MAAA,uBAC1B,QAAC,KAAK;QAAC,OAAO,EAAEZ,OAAQ;QAAC,OAAO,EAAEC,cAAe;QAAC,MAAM,EAAEC;MAAW;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACnE,eACN;MAAK,SAAS,EAAC,WAAW;MAAA,uBACzB;QAAA,UAAKO;MAAK;QAAA;QAAA;QAAA;MAAA;IAAM;MAAA;MAAA;MAAA;IAAA,QACX;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAER;AAAC,GAvDuBhB,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}